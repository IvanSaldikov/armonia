services:
  backend:
    container_name: armonia-backend
    build:
      context: .
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8007:8000"
    volumes:
      - ./app/:/home/app/web/
      - ./media/:/mnt/media
      - ./static/:/mnt/static
      - ./geo_data/:/mnt/geo_data
    env_file:
      - .env.local
    networks:
      - db
      - redis
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
  db:
    image: postgres:16.1-alpine
    hostname: db
    environment:
      POSTGRES_USER: armonia
      POSTGRES_PASSWORD: armonia_password
      POSTGRES_DB: armonia
    ports:
      - "45432:5432"
    networks:
      - db
    volumes:
      - postgres_armonia_vol:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "armonia", "-U", "armonia" ]
      timeout: 1s
      retries: 5
  redis:
    image: redis:7.2.3
    ports:
      - "36379:6379"
    hostname: redis
    networks:
      - redis
    volumes:
      - redis_armonia_vol:/data
  rabbitmq:
    image: public.ecr.aws/docker/library/rabbitmq:3-management-alpine
    container_name: rabbitmq
    restart: always
    ports:
      - "15672:5672"
      - "25672:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - rabbitmq_armonia_vol:/var/lib/rabbitmq/mnesia
    labels:
      log_format: "structlog"
    logging:
      driver: json-file
      options:
        max-size: 100m
    networks:
      - rabbitmq
  celery:
    hostname: celery
    build:
      context: .
    command: "/home/app/docker_scripts/run_celery.sh"
    env_file:
      - .env.local
    networks:
      - db
      - redis
      - rabbitmq
    volumes:
      - ./app/:/home/app/web/
      - ./geo_data/:/mnt/geo_data
      - ./media/:/mnt/media
    depends_on:
      backend:
        condition: service_started
  bg_celery_beat:
    build:
      context: .
    command: celery -A config beat
    env_file:
      - .env.local
    networks:
      - db
      - redis
    volumes:
      - ./app/:/home/app/web/
      - ./geo_data/:/mnt/geo_data
    depends_on:
      backend:
        condition: service_started
  flower:
    image: mher/flower
    environment:
      - CELERY_BROKER_URL=redis://:@redis:6379/0
      - FLOWER_PORT=8888
    networks:
      - redis
    env_file:
      - .env.local
    ports:
      - "8811:8888"
    depends_on:
      - celery
  handle_notifications:
    build:
      context: .
    command: python handle_notifications.py
    container_name: notificator
    volumes:
      - ./app/:/home/app/web/
      - ./media/:/mnt/media
    restart: always
    env_file:
      - .env.local
    depends_on:
      backend:
        condition: service_started
    networks:
      - db
      - redis
      - rabbitmq

volumes:
  redis_armonia_vol:
  postgres_armonia_vol:
  rabbitmq_armonia_vol:

networks:
  db:
  redis:
  rabbitmq:
